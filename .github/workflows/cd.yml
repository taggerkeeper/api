name: Tagger Keeper API CD

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CONTAINER: taggerkeeper-api
  REGISTRY: ghcr.io
  REPO: taggerkeeper/api

jobs:

  test:
    name: Run tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  build:
    name: Push Docker image to GitHub Container Registry
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18.x ]
    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci --only=production

      - name: Build Typescript
        run: npm run build

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO }}:latest
          target: production
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    name: Deploy to Digital Ocean
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH connection
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}

      - name: Add to known hosts
        run: ssh-keyscan -H ${{ secrets.DIGITALOCEAN_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Pull latest container
        run: ssh ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} "docker pull ${{ env.REGISTRY }}/${{ env.REPO }}:latest"

      - name: Stop old container
        continue-on-error: true
        run: ssh ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} "docker stop ${{ env.CONTAINER }}"

      - name: Remove old container
        continue-on-error: true
        run: ssh ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} "docker rm ${{ env.CONTAINER }}"

      - name: Start latest container
        run: ssh ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} "docker run --network api -p 8080:8080 -d --restart unless-stopped --name=${{ env.CONTAINER }} ${{ env.REGISTRY }}/${{ env.REPO }}:latest"

      - name: Log out from the GitHub Container Registry
        run: ssh ${{ secrets.DIGITALOCEAN_SSH_USER }}@${{ secrets.DIGITALOCEAN_SSH_HOST }} "docker logout ${{ env.REGISTRY }}"